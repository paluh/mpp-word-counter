// Generated by purs version 0.15.2
import * as Safe_Coerce from "../Safe.Coerce/index.js";
var wrap = Safe_Coerce.coerce;
var unwrap = Safe_Coerce.coerce;
var underF2 = function () {
    return function () {
        return function () {
            return function () {
                return function (v) {
                    return Safe_Coerce.coerce();
                };
            };
        };
    };
};
var underF = function () {
    return function () {
        return function () {
            return function () {
                return function (v) {
                    return Safe_Coerce.coerce();
                };
            };
        };
    };
};
var under2 = function () {
    return function () {
        return function (v) {
            return Safe_Coerce.coerce();
        };
    };
};
var under = function () {
    return function () {
        return function (v) {
            return Safe_Coerce.coerce();
        };
    };
};
var un = function () {
    return function (v) {
        return unwrap();
    };
};
var traverse = function () {
    return function () {
        return function (v) {
            return Safe_Coerce.coerce();
        };
    };
};
var overF2 = function () {
    return function () {
        return function () {
            return function () {
                return function (v) {
                    return Safe_Coerce.coerce();
                };
            };
        };
    };
};
var overF = function () {
    return function () {
        return function () {
            return function () {
                return function (v) {
                    return Safe_Coerce.coerce();
                };
            };
        };
    };
};
var over2 = function () {
    return function () {
        return function (v) {
            return Safe_Coerce.coerce();
        };
    };
};
var over = function () {
    return function () {
        return function (v) {
            return Safe_Coerce.coerce();
        };
    };
};
var newtypeMultiplicative = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeLast = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeFirst = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeEndo = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeDual = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeDisj = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeConj = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeAdditive = {
    Coercible0: function () {
        return undefined;
    }
};
var modify = function () {
    return function (fn) {
        return function (t) {
            return wrap()(fn(unwrap()(t)));
        };
    };
};
var collect = function () {
    return function () {
        return function (v) {
            return Safe_Coerce.coerce();
        };
    };
};
var alaF = function () {
    return function () {
        return function () {
            return function () {
                return function (v) {
                    return Safe_Coerce.coerce();
                };
            };
        };
    };
};
var ala = function () {
    return function () {
        return function () {
            return function (v) {
                return function (f) {
                    return Safe_Coerce.coerce()(f(wrap()));
                };
            };
        };
    };
};
export {
    wrap,
    unwrap,
    un,
    modify,
    ala,
    alaF,
    over,
    overF,
    under,
    underF,
    over2,
    overF2,
    under2,
    underF2,
    traverse,
    collect,
    newtypeAdditive,
    newtypeMultiplicative,
    newtypeConj,
    newtypeDisj,
    newtypeDual,
    newtypeEndo,
    newtypeFirst,
    newtypeLast
};
