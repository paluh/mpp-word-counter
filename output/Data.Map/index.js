// Generated by purs version 0.15.2
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
var SemigroupMap = function (x) {
    return x;
};
var traversableWithIndexSemigroupMap = Data_Map_Internal.traversableWithIndexMap;
var traversableSemigroupMap = Data_Map_Internal.traversableMap;
var showSemigroupMap = function (dictShow) {
    return function (dictShow1) {
        return Data_Map_Internal.showMap(dictShow)(dictShow1);
    };
};
var semigroupSemigroupMap = function (dictOrd) {
    return function (dictSemigroup) {
        return {
            append: function (v) {
                return function (v1) {
                    return Data_Map_Internal.unionWith(dictOrd)(Data_Semigroup.append(dictSemigroup))(v)(v1);
                };
            }
        };
    };
};
var plusSemigroupMap = function (dictOrd) {
    return Data_Map_Internal.plusMap(dictOrd);
};
var ordSemigroupMap = function (dictOrd) {
    return function (dictOrd1) {
        return Data_Map_Internal.ordMap(dictOrd)(dictOrd1);
    };
};
var ord1SemigroupMap = function (dictOrd) {
    return Data_Map_Internal.ord1Map(dictOrd);
};
var newtypeSemigroupMap = {
    Coercible0: function () {
        return undefined;
    }
};
var monoidSemigroupMap = function (dictOrd) {
    return function (dictSemigroup) {
        return {
            mempty: Data_Map_Internal.empty,
            Semigroup0: function () {
                return semigroupSemigroupMap(dictOrd)(dictSemigroup);
            }
        };
    };
};
var keys = /* #__PURE__ */ (function () {
    var $20 = Data_Functor["void"](Data_Map_Internal.functorMap);
    return function ($21) {
        return Data_Set.fromMap($20($21));
    };
})();
var functorWithIndexSemigroupMap = Data_Map_Internal.functorWithIndexMap;
var functorSemigroupMap = Data_Map_Internal.functorMap;
var foldableWithIndexSemigroupMap = Data_Map_Internal.foldableWithIndexMap;
var foldableSemigroupMap = Data_Map_Internal.foldableMap;
var eqSemigroupMap = function (dictEq) {
    return function (dictEq1) {
        return Data_Map_Internal.eqMap(dictEq)(dictEq1);
    };
};
var eq1SemigroupMap = function (dictEq) {
    return Data_Map_Internal.eq1Map(dictEq);
};
var bindSemigroupMap = function (dictOrd) {
    return Data_Map_Internal.bindMap(dictOrd);
};
var applySemigroupMap = function (dictOrd) {
    return Data_Map_Internal.applyMap(dictOrd);
};
var altSemigroupMap = function (dictOrd) {
    return Data_Map_Internal.altMap(dictOrd);
};
export {
    keys,
    SemigroupMap,
    eq1SemigroupMap,
    eqSemigroupMap,
    ord1SemigroupMap,
    ordSemigroupMap,
    newtypeSemigroupMap,
    showSemigroupMap,
    semigroupSemigroupMap,
    monoidSemigroupMap,
    altSemigroupMap,
    plusSemigroupMap,
    functorSemigroupMap,
    functorWithIndexSemigroupMap,
    applySemigroupMap,
    bindSemigroupMap,
    foldableSemigroupMap,
    foldableWithIndexSemigroupMap,
    traversableSemigroupMap,
    traversableWithIndexSemigroupMap
};
export {
    alter,
    catMaybes,
    checkValid,
    delete,
    difference,
    empty,
    filter,
    filterKeys,
    filterWithKey,
    findMax,
    findMin,
    foldSubmap,
    fromFoldable,
    fromFoldableWith,
    fromFoldableWithIndex,
    insert,
    insertWith,
    intersection,
    intersectionWith,
    isEmpty,
    isSubmap,
    lookup,
    lookupGE,
    lookupGT,
    lookupLE,
    lookupLT,
    mapMaybe,
    mapMaybeWithKey,
    member,
    pop,
    showTree,
    singleton,
    size,
    submap,
    toUnfoldable,
    toUnfoldableUnordered,
    union,
    unionWith,
    unions,
    update,
    values
} from "../Data.Map.Internal/index.js";
