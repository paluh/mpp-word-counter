// Generated by purs version 0.15.2
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as StringParser_Combinators from "../StringParser.Combinators/index.js";
import * as StringParser_Parser from "../StringParser.Parser/index.js";
var AssocNone = /* #__PURE__ */ (function () {
    function AssocNone() {

    };
    AssocNone.value = new AssocNone();
    return AssocNone;
})();
var AssocLeft = /* #__PURE__ */ (function () {
    function AssocLeft() {

    };
    AssocLeft.value = new AssocLeft();
    return AssocLeft;
})();
var AssocRight = /* #__PURE__ */ (function () {
    function AssocRight() {

    };
    AssocRight.value = new AssocRight();
    return AssocRight;
})();
var Infix = /* #__PURE__ */ (function () {
    function Infix(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Infix.create = function (value0) {
        return function (value1) {
            return new Infix(value0, value1);
        };
    };
    return Infix;
})();
var Prefix = /* #__PURE__ */ (function () {
    function Prefix(value0) {
        this.value0 = value0;
    };
    Prefix.create = function (value0) {
        return new Prefix(value0);
    };
    return Prefix;
})();
var Postfix = /* #__PURE__ */ (function () {
    function Postfix(value0) {
        this.value0 = value0;
    };
    Postfix.create = function (value0) {
        return new Postfix(value0);
    };
    return Postfix;
})();
var buildExprParser = function (operators) {
    return function (simpleExpr) {
        var termP = function (prefixP) {
            return function (term) {
                return function (postfixP) {
                    return Control_Bind.bind(StringParser_Parser.bindParser)(prefixP)(function (pre) {
                        return Control_Bind.bind(StringParser_Parser.bindParser)(term)(function (x) {
                            return Control_Bind.bind(StringParser_Parser.bindParser)(postfixP)(function (post) {
                                return Control_Applicative.pure(StringParser_Parser.applicativeParser)(post(pre(x)));
                            });
                        });
                    });
                };
            };
        };
        var splitOp = function (v) {
            return function (accum) {
                if (v instanceof Infix && v.value1 instanceof AssocNone) {
                    return {
                        rassoc: accum.rassoc,
                        lassoc: accum.lassoc,
                        nassoc: new Data_List_Types.Cons(v.value0, accum.nassoc),
                        prefix: accum.prefix,
                        postfix: accum.postfix
                    };
                };
                if (v instanceof Infix && v.value1 instanceof AssocLeft) {
                    return {
                        rassoc: accum.rassoc,
                        lassoc: new Data_List_Types.Cons(v.value0, accum.lassoc),
                        nassoc: accum.nassoc,
                        prefix: accum.prefix,
                        postfix: accum.postfix
                    };
                };
                if (v instanceof Infix && v.value1 instanceof AssocRight) {
                    return {
                        rassoc: new Data_List_Types.Cons(v.value0, accum.rassoc),
                        lassoc: accum.lassoc,
                        nassoc: accum.nassoc,
                        prefix: accum.prefix,
                        postfix: accum.postfix
                    };
                };
                if (v instanceof Prefix) {
                    return {
                        rassoc: accum.rassoc,
                        lassoc: accum.lassoc,
                        nassoc: accum.nassoc,
                        prefix: new Data_List_Types.Cons(v.value0, accum.prefix),
                        postfix: accum.postfix
                    };
                };
                if (v instanceof Postfix) {
                    return {
                        rassoc: accum.rassoc,
                        lassoc: accum.lassoc,
                        nassoc: accum.nassoc,
                        prefix: accum.prefix,
                        postfix: new Data_List_Types.Cons(v.value0, accum.postfix)
                    };
                };
                throw new Error("Failed pattern match at StringParser.Expr (line 62, column 5 - line 62, column 68): " + [ v.constructor.name, accum.constructor.name ]);
            };
        };
        var rassocP1 = function (x) {
            return function (rassocOp) {
                return function (prefixP) {
                    return function (term) {
                        return function (postfixP) {
                            return Control_Alt.alt(StringParser_Parser.altParser)(rassocP(x)(rassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(StringParser_Parser.applicativeParser)(x));
                        };
                    };
                };
            };
        };
        var rassocP = function (x) {
            return function (rassocOp) {
                return function (prefixP) {
                    return function (term) {
                        return function (postfixP) {
                            return Control_Bind.bind(StringParser_Parser.bindParser)(rassocOp)(function (f) {
                                return Control_Bind.bind(StringParser_Parser.bindParser)(Control_Bind.bind(StringParser_Parser.bindParser)(termP(prefixP)(term)(postfixP))(function (z) {
                                    return rassocP1(z)(rassocOp)(prefixP)(term)(postfixP);
                                }))(function (y) {
                                    return Control_Applicative.pure(StringParser_Parser.applicativeParser)(f(x)(y));
                                });
                            });
                        };
                    };
                };
            };
        };
        var nassocP = function (x) {
            return function (nassocOp) {
                return function (prefixP) {
                    return function (term) {
                        return function (postfixP) {
                            return Control_Bind.bind(StringParser_Parser.bindParser)(nassocOp)(function (f) {
                                return Control_Bind.bind(StringParser_Parser.bindParser)(termP(prefixP)(term)(postfixP))(function (y) {
                                    return Control_Applicative.pure(StringParser_Parser.applicativeParser)(f(x)(y));
                                });
                            });
                        };
                    };
                };
            };
        };
        var lassocP1 = function (x) {
            return function (lassocOp) {
                return function (prefixP) {
                    return function (term) {
                        return function (postfixP) {
                            return Control_Alt.alt(StringParser_Parser.altParser)(lassocP(x)(lassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(StringParser_Parser.applicativeParser)(x));
                        };
                    };
                };
            };
        };
        var lassocP = function (x) {
            return function (lassocOp) {
                return function (prefixP) {
                    return function (term) {
                        return function (postfixP) {
                            return Control_Bind.bind(StringParser_Parser.bindParser)(lassocOp)(function (f) {
                                return Control_Bind.bind(StringParser_Parser.bindParser)(termP(prefixP)(term)(postfixP))(function (y) {
                                    return lassocP1(f(x)(y))(lassocOp)(prefixP)(term)(postfixP);
                                });
                            });
                        };
                    };
                };
            };
        };
        var makeParser = function (term) {
            return function (ops) {
                var accum = Data_Foldable.foldr(Data_Foldable.foldableArray)(splitOp)({
                    rassoc: Data_List_Types.Nil.value,
                    lassoc: Data_List_Types.Nil.value,
                    nassoc: Data_List_Types.Nil.value,
                    prefix: Data_List_Types.Nil.value,
                    postfix: Data_List_Types.Nil.value
                })(ops);
                var lassocOp = StringParser_Combinators.choice(Data_List_Types.foldableList)(accum.lassoc);
                var nassocOp = StringParser_Combinators.choice(Data_List_Types.foldableList)(accum.nassoc);
                var postfixOp = StringParser_Combinators.withError(StringParser_Combinators.choice(Data_List_Types.foldableList)(accum.postfix))("");
                var postfixP = Control_Alt.alt(StringParser_Parser.altParser)(postfixOp)(Control_Applicative.pure(StringParser_Parser.applicativeParser)(Control_Category.identity(Control_Category.categoryFn)));
                var prefixOp = StringParser_Combinators.withError(StringParser_Combinators.choice(Data_List_Types.foldableList)(accum.prefix))("");
                var prefixP = Control_Alt.alt(StringParser_Parser.altParser)(prefixOp)(Control_Applicative.pure(StringParser_Parser.applicativeParser)(Control_Category.identity(Control_Category.categoryFn)));
                var rassocOp = StringParser_Combinators.choice(Data_List_Types.foldableList)(accum.rassoc);
                return Control_Bind.bind(StringParser_Parser.bindParser)(termP(prefixP)(term)(postfixP))(function (x) {
                    return Control_Alt.alt(StringParser_Parser.altParser)(rassocP(x)(rassocOp)(prefixP)(term)(postfixP))(Control_Alt.alt(StringParser_Parser.altParser)(lassocP(x)(lassocOp)(prefixP)(term)(postfixP))(Control_Alt.alt(StringParser_Parser.altParser)(nassocP(x)(nassocOp)(prefixP)(term)(postfixP))(StringParser_Combinators.withError(Control_Applicative.pure(StringParser_Parser.applicativeParser)(x))("operator"))));
                });
            };
        };
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(makeParser)(simpleExpr)(operators);
    };
};
export {
    AssocNone,
    AssocLeft,
    AssocRight,
    Infix,
    Prefix,
    Postfix,
    buildExprParser
};
