// Generated by purs version 0.15.2
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Lazy from "../Control.Lazy/index.js";
import * as Control_Monad_Rec_Class from "../Control.Monad.Rec.Class/index.js";
import * as Control_Plus from "../Control.Plus/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Lazy from "../Data.List.Lazy/index.js";
import * as Data_List_NonEmpty from "../Data.List.NonEmpty/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unfoldable1 from "../Data.Unfoldable1/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Parsing from "../Parsing/index.js";
var withLazyErrorMessage = function (p) {
    return function (msg) {
        return Control_Alt.alt(Parsing.altParserT)(p)(Control_Lazy.defer(Parsing.lazyParserT)(function (v) {
            return Parsing.fail("Expected " + msg(Data_Unit.unit));
        }));
    };
};
var withErrorMessage = function (p) {
    return function (msg) {
        return Control_Alt.alt(Parsing.altParserT)(p)(Parsing.fail("Expected " + msg));
    };
};
var tryRethrow = function (v) {
    return function (v1, more, lift, $$throw, done) {
        return v(v1, more, lift, function (v2, v3) {
            return $$throw(new Parsing.ParseState(v2.value0, v2.value1, v1.value2), new Parsing.ParseError(v3.value0, v1.value1));
        }, done);
    };
};
var $$try = function (v) {
    return function (v1, more, lift, $$throw, done) {
        return v(v1, more, lift, function (v2, err) {
            return $$throw(new Parsing.ParseState(v2.value0, v2.value1, v1.value2), err);
        }, done);
    };
};
var skipMany1 = function (p) {
    var go = function (v) {
        return Control_Alt.alt(Parsing.altParserT)(Data_Functor.voidLeft(Parsing.functorParserT)(p)(new Control_Monad_Rec_Class.Loop(Data_Unit.unit)))(Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Done(Data_Unit.unit)));
    };
    return Control_Apply.applySecond(Parsing.applyParserT)(p)(Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT)(go)(Data_Unit.unit));
};
var skipMany = function (p) {
    return Control_Alt.alt(Parsing.altParserT)(skipMany1(p))(Control_Applicative.pure(Parsing.applicativeParserT)(Data_Unit.unit));
};
var sepEndBy1 = function (p) {
    return function (sep) {
        var go = function (acc) {
            var done = Control_Lazy.defer(Parsing.lazyParserT)(function (v) {
                return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Done(Data_List.reverse(acc)));
            });
            var nextOne = Control_Bind.bind(Parsing.bindParserT)(sep)(function () {
                return Control_Alt.alt(Parsing.altParserT)(Data_Functor.mapFlipped(Parsing.functorParserT)(p)(function (a) {
                    return new Control_Monad_Rec_Class.Loop(new Data_List_Types.Cons(a, acc));
                }))(done);
            });
            return Control_Alt.alt(Parsing.altParserT)(nextOne)(done);
        };
        return Control_Bind.bind(Parsing.bindParserT)(p)(function (a) {
            return Control_Alt.alt(Parsing.altParserT)(Data_Functor.map(Parsing.functorParserT)(Data_List_NonEmpty["cons$prime"](a))(Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT)(go)(Data_List_Types.Nil.value)))(Control_Applicative.pure(Parsing.applicativeParserT)(Data_List_NonEmpty.singleton(a)));
        });
    };
};
var sepEndBy = function (p) {
    return function (sep) {
        return Control_Alt.alt(Parsing.altParserT)(Data_Functor.map(Parsing.functorParserT)(Data_List_NonEmpty.toList)(sepEndBy1(p)(sep)))(Control_Applicative.pure(Parsing.applicativeParserT)(Data_List_Types.Nil.value));
    };
};
var sepBy1 = function (p) {
    return function (sep) {
        return Control_Bind.bind(Parsing.bindParserT)(p)(function (a) {
            return Control_Bind.bind(Parsing.bindParserT)(Data_List.manyRec(Parsing.monadRecParserT)(Parsing.alternativeParserT)(Control_Apply.applySecond(Parsing.applyParserT)(sep)(p)))(function (as) {
                return Control_Applicative.pure(Parsing.applicativeParserT)(Data_List_NonEmpty["cons$prime"](a)(as));
            });
        });
    };
};
var sepBy = function (p) {
    return function (sep) {
        return Control_Alt.alt(Parsing.altParserT)(Data_Functor.map(Parsing.functorParserT)(Data_List_NonEmpty.toList)(sepBy1(p)(sep)))(Control_Applicative.pure(Parsing.applicativeParserT)(Data_List_Types.Nil.value));
    };
};
var optional = function (p) {
    return Control_Alt.alt(Parsing.altParserT)(Data_Functor["void"](Parsing.functorParserT)(p))(Control_Applicative.pure(Parsing.applicativeParserT)(Data_Unit.unit));
};
var option = function (a) {
    return function (p) {
        return Control_Alt.alt(Parsing.altParserT)(p)(Control_Applicative.pure(Parsing.applicativeParserT)(a));
    };
};
var optionMaybe = function (p) {
    return option(Data_Maybe.Nothing.value)(Data_Functor.map(Parsing.functorParserT)(Data_Maybe.Just.create)(p));
};
var notFollowedBy = function (p) {
    return $$try(Control_Alt.alt(Parsing.altParserT)(Control_Apply.applySecond(Parsing.applyParserT)($$try(p))(Parsing.fail("Negated parser succeeded")))(Control_Applicative.pure(Parsing.applicativeParserT)(Data_Unit.unit)));
};
var manyTill_ = function (p) {
    return function (end) {
        var go = function (xs) {
            return Control_Alt.alt(Parsing.altParserT)(Control_Bind.bind(Parsing.bindParserT)(end)(function (t) {
                return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(Data_List.reverse(xs), t)));
            }))(Control_Bind.bind(Parsing.bindParserT)(p)(function (x) {
                return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Loop(new Data_List_Types.Cons(x, xs)));
            }));
        };
        return Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT)(go)(Data_List_Types.Nil.value);
    };
};
var manyTill = function (p) {
    return function (end) {
        var go = function (acc) {
            return Control_Alt.alt(Parsing.altParserT)(Data_Functor.mapFlipped(Parsing.functorParserT)(end)(function (v) {
                return new Control_Monad_Rec_Class.Done(Data_List.reverse(acc));
            }))(Data_Functor.mapFlipped(Parsing.functorParserT)(p)(function (x) {
                return new Control_Monad_Rec_Class.Loop(new Data_List_Types.Cons(x, acc));
            }));
        };
        return Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT)(go)(Data_List_Types.Nil.value);
    };
};
var manyIndex = function (from) {
    return function (to) {
        return function (p) {
            var go = function (v) {
                var $45 = v.value0 >= to;
                if ($45) {
                    return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v.value0, Data_List.reverse(v.value1))));
                };
                return Control_Alt.alt(Parsing.altParserT)(Control_Bind.bind(Parsing.bindParserT)(p(v.value0))(function (x) {
                    return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v.value0 + 1 | 0, new Data_List_Types.Cons(x, v.value1))));
                }))((function () {
                    var $46 = v.value0 >= from;
                    if ($46) {
                        return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v.value0, Data_List.reverse(v.value1))));
                    };
                    return Parsing.fail("Expected more phrases");
                })());
            };
            var $49 = from > to || from < 0;
            if ($49) {
                return Control_Applicative.pure(Parsing.applicativeParserT)(new Data_Tuple.Tuple(0, Data_List_Types.Nil.value));
            };
            return Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT)(go)(new Data_Tuple.Tuple(0, Data_List_Types.Nil.value));
        };
    };
};
var many1Till_ = function (p) {
    return function (end) {
        return Control_Bind.bind(Parsing.bindParserT)(p)(function (x) {
            return Control_Bind.bind(Parsing.bindParserT)(manyTill_(p)(end))(function (v) {
                return Control_Applicative.pure(Parsing.applicativeParserT)(new Data_Tuple.Tuple(Data_List_NonEmpty["cons$prime"](x)(v.value0), v.value1));
            });
        });
    };
};
var many1Till = function (p) {
    return function (end) {
        return Control_Apply.apply(Parsing.applyParserT)(Data_Functor.map(Parsing.functorParserT)(Data_List_NonEmpty["cons$prime"])(p))(manyTill(p)(end));
    };
};
var many1 = function (p) {
    return Control_Apply.apply(Parsing.applyParserT)(Data_Functor.map(Parsing.functorParserT)(Data_List_NonEmpty["cons$prime"])(p))(Data_List.manyRec(Parsing.monadRecParserT)(Parsing.alternativeParserT)(p));
};
var many = /* #__PURE__ */ Data_List.manyRec(Parsing.monadRecParserT)(Parsing.alternativeParserT);
var lookAhead = function (v) {
    return function (state1, more, lift, $$throw, done) {
        return v(state1, more, lift, function (v1, err) {
            return $$throw(state1, err);
        }, function (v1, res) {
            return done(state1, res);
        });
    };
};
var endBy1 = function (p) {
    return function (sep) {
        return many1(Control_Apply.applyFirst(Parsing.applyParserT)(p)(sep));
    };
};
var endBy = function (p) {
    return function (sep) {
        return Data_List.manyRec(Parsing.monadRecParserT)(Parsing.alternativeParserT)(Control_Apply.applyFirst(Parsing.applyParserT)(p)(sep));
    };
};
var choice = function (dictFoldable) {
    var go = function (p1) {
        return function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just(p1);
            };
            if (v instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(Control_Alt.alt(Parsing.altParserT)(p1)(v.value0));
            };
            throw new Error("Failed pattern match at Parsing.Combinators (line 357, column 11 - line 359, column 32): " + [ v.constructor.name ]);
        };
    };
    var $68 = Data_Maybe.fromMaybe(Control_Plus.empty(Parsing.plusParserT));
    var $69 = Data_Foldable.foldr(dictFoldable)(go)(Data_Maybe.Nothing.value);
    return function ($70) {
        return $68($69($70));
    };
};
var chainr1 = function (p) {
    return function (f) {
        var apply = function (y) {
            return function (v) {
                return v.value1(v.value0)(y);
            };
        };
        var go = function (v) {
            return Control_Alt.alt(Parsing.altParserT)(Control_Bind.bind(Parsing.bindParserT)(f)(function (op) {
                return Control_Bind.bind(Parsing.bindParserT)(p)(function (a) {
                    return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Loop({
                        last: a,
                        init: new Data_List_Types.Cons(new Data_Tuple.Tuple(v.last, op), v.init)
                    }));
                });
            }))(Control_Lazy.defer(Parsing.lazyParserT)(function (v1) {
                return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Done(Data_Foldable.foldl(Data_List_Types.foldableList)(apply)(v.last)(v.init)));
            }));
        };
        return Control_Bind.bind(Parsing.bindParserT)(p)(function (a) {
            return Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT)(go)({
                last: a,
                init: Data_List_Types.Nil.value
            });
        });
    };
};
var chainr = function (p) {
    return function (f) {
        return function (a) {
            return Control_Alt.alt(Parsing.altParserT)(chainr1(p)(f))(Control_Applicative.pure(Parsing.applicativeParserT)(a));
        };
    };
};
var chainl1 = function (p) {
    return function (f) {
        var go = function (a) {
            return Control_Alt.alt(Parsing.altParserT)(Control_Bind.bind(Parsing.bindParserT)(f)(function (op) {
                return Control_Bind.bind(Parsing.bindParserT)(p)(function (a$prime) {
                    return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Loop(op(a)(a$prime)));
                });
            }))(Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Done(a)));
        };
        return Control_Bind.bind(Parsing.bindParserT)(p)(function (a) {
            return Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT)(go)(a);
        });
    };
};
var chainl = function (p) {
    return function (f) {
        return function (a) {
            return Control_Alt.alt(Parsing.altParserT)(chainl1(p)(f))(Control_Applicative.pure(Parsing.applicativeParserT)(a));
        };
    };
};
var between = function (open) {
    return function (close) {
        return function (p) {
            return Control_Apply.applyFirst(Parsing.applyParserT)(Control_Apply.applySecond(Parsing.applyParserT)(open)(p))(close);
        };
    };
};
var asErrorMessage = /* #__PURE__ */ Data_Function.flip(withErrorMessage);
var advance = function (p) {
    return Control_Bind.bind(Parsing.bindParserT)(Parsing.position)(function (v) {
        return Control_Bind.bind(Parsing.bindParserT)(p)(function (x) {
            return Control_Bind.bind(Parsing.bindParserT)(Parsing.position)(function (v1) {
                var $65 = v1.index > v.index;
                if ($65) {
                    return Control_Applicative.pure(Parsing.applicativeParserT)(x);
                };
                return Parsing.fail("Expected progress");
            });
        });
    });
};
export {
    $$try as try,
    tryRethrow,
    lookAhead,
    choice,
    between,
    notFollowedBy,
    option,
    optionMaybe,
    optional,
    many,
    many1,
    manyTill,
    manyTill_,
    many1Till,
    many1Till_,
    manyIndex,
    skipMany,
    skipMany1,
    sepBy,
    sepBy1,
    sepEndBy,
    sepEndBy1,
    endBy,
    endBy1,
    chainl,
    chainl1,
    chainr,
    chainr1,
    advance,
    withErrorMessage,
    withLazyErrorMessage,
    asErrorMessage
};
export {
    alt,
    empty
} from "../Control.Plus/index.js";
export {
    replicateM
} from "../Data.List.Lazy/index.js";
export {
    replicateA
} from "../Data.Unfoldable/index.js";
export {
    replicate1A
} from "../Data.Unfoldable1/index.js";
