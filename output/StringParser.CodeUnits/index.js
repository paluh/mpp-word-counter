// Generated by purs version 0.15.2
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Char from "../Data.Char/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_Regex from "../Data.String.Regex/index.js";
import * as Data_String_Regex_Flags from "../Data.String.Regex.Flags/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as StringParser_Combinators from "../StringParser.Combinators/index.js";
import * as StringParser_Parser from "../StringParser.Parser/index.js";
var string = function (pattern) {
    return function (v) {
        var length = Data_String_CodeUnits.length(pattern);
        var v1 = Data_String_CodeUnits.splitAt(length)(v.substring);
        var $12 = v1.before === pattern;
        if ($12) {
            return new Data_Either.Right({
                result: pattern,
                suffix: {
                    substring: v1.after,
                    position: v.position + length | 0
                }
            });
        };
        return new Data_Either.Left({
            pos: v.position,
            error: "Expected '" + (pattern + "'.")
        });
    };
};
var regex = function (pat) {
    var pattern = "^(" + (pat + ")");
    var matchRegex = function (r) {
        return function (v) {
            var v1 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.head)(Data_String_Regex.match(r)(v.substring));
            if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Data_Maybe.Just) {
                return new Data_Either.Right({
                    result: v1.value0.value0,
                    suffix: {
                        substring: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(v1.value0.value0))(v.substring),
                        position: v.position + Data_String_CodeUnits.length(v1.value0.value0) | 0
                    }
                });
            };
            return new Data_Either.Left({
                pos: v.position,
                error: "no match"
            });
        };
    };
    var v = Data_String_Regex.regex(pattern)(Data_String_Regex_Flags.noFlags);
    if (v instanceof Data_Either.Left) {
        return StringParser_Parser.fail("StringParser.String.regex': illegal regex " + pat);
    };
    if (v instanceof Data_Either.Right) {
        return matchRegex(v.value0);
    };
    throw new Error("Failed pattern match at StringParser.CodeUnits (line 125, column 3 - line 129, column 19): " + [ v.constructor.name ]);
};
var eof = function (s) {
    if (0 < Data_String_CodeUnits.length(s.substring)) {
        return new Data_Either.Left({
            pos: s.position,
            error: "Expected EOF"
        });
    };
    return new Data_Either.Right({
        result: Data_Unit.unit,
        suffix: s
    });
};
var anyChar = function (v) {
    var v1 = Data_String_CodeUnits.charAt(0)(v.substring);
    if (v1 instanceof Data_Maybe.Just) {
        return new Data_Either.Right({
            result: v1.value0,
            suffix: {
                substring: Data_String_CodeUnits.drop(1)(v.substring),
                position: v.position + 1 | 0
            }
        });
    };
    if (v1 instanceof Data_Maybe.Nothing) {
        return new Data_Either.Left({
            pos: v.position,
            error: "Unexpected EOF"
        });
    };
    throw new Error("Failed pattern match at StringParser.CodeUnits (line 50, column 3 - line 52, column 63): " + [ v1.constructor.name ]);
};
var anyDigit = /* #__PURE__ */ StringParser_Combinators["try"](/* #__PURE__ */ Control_Bind.bind(StringParser_Parser.bindParser)(anyChar)(function (c) {
    var $34 = c >= "0" && c <= "9";
    if ($34) {
        return Control_Applicative.pure(StringParser_Parser.applicativeParser)(c);
    };
    return StringParser_Parser.fail("Character " + (Data_Show.show(Data_Show.showChar)(c) + " is not a digit"));
}));
var lowerCaseChar = /* #__PURE__ */ StringParser_Combinators["try"](/* #__PURE__ */ Control_Bind.bind(StringParser_Parser.bindParser)(anyChar)(function (c) {
    var $35 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(Data_Char.toCharCode(c))(Data_Array.range(97)(122));
    if ($35) {
        return Control_Applicative.pure(StringParser_Parser.applicativeParser)(c);
    };
    return StringParser_Parser.fail("Expected a lower case character but found " + Data_Show.show(Data_Show.showChar)(c));
}));
var satisfy = function (f) {
    return StringParser_Combinators["try"](Control_Bind.bind(StringParser_Parser.bindParser)(anyChar)(function (c) {
        var $36 = f(c);
        if ($36) {
            return Control_Applicative.pure(StringParser_Parser.applicativeParser)(c);
        };
        return StringParser_Parser.fail("Character " + (Data_Show.show(Data_Show.showChar)(c) + " did not satisfy predicate"));
    }));
};
var $$char = function (c) {
    return StringParser_Combinators.withError(satisfy(function (v) {
        return v === c;
    }))("Could not match character " + Data_Show.show(Data_Show.showChar)(c));
};
var noneOf = function (dictFoldable) {
    var $38 = Data_Function.flip(Data_Foldable.notElem(dictFoldable)(Data_Eq.eqChar));
    return function ($39) {
        return satisfy($38($39));
    };
};
var oneOf = function (dictFoldable) {
    var $40 = Data_Function.flip(Data_Foldable.elem(dictFoldable)(Data_Eq.eqChar));
    return function ($41) {
        return satisfy($40($41));
    };
};
var whiteSpace = /* #__PURE__ */ Control_Bind.bind(StringParser_Parser.bindParser)(/* #__PURE__ */ StringParser_Combinators.many(/* #__PURE__ */ satisfy(function (c) {
    return c === "\x0a" || (c === "\x0d" || (c === " " || c === "\x09"));
})))(function (cs) {
    return Control_Applicative.pure(StringParser_Parser.applicativeParser)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_String_CodeUnits.singleton)(cs));
});
var skipSpaces = /* #__PURE__ */ Data_Functor["void"](StringParser_Parser.functorParser)(whiteSpace);
var upperCaseChar = /* #__PURE__ */ StringParser_Combinators["try"](/* #__PURE__ */ Control_Bind.bind(StringParser_Parser.bindParser)(anyChar)(function (c) {
    var $37 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(Data_Char.toCharCode(c))(Data_Array.range(65)(90));
    if ($37) {
        return Control_Applicative.pure(StringParser_Parser.applicativeParser)(c);
    };
    return StringParser_Parser.fail("Expected an upper case character but found " + Data_Show.show(Data_Show.showChar)(c));
}));
var anyLetter = /* #__PURE__ */ Control_Alt.alt(StringParser_Parser.altParser)(lowerCaseChar)(/* #__PURE__ */ StringParser_Combinators.withError(upperCaseChar)("Expected a letter"));
var alphaNum = /* #__PURE__ */ Control_Alt.alt(StringParser_Parser.altParser)(anyLetter)(/* #__PURE__ */ StringParser_Combinators.withError(anyDigit)("Expected a letter or a number"));
export {
    eof,
    anyChar,
    anyDigit,
    string,
    satisfy,
    $$char as char,
    whiteSpace,
    skipSpaces,
    oneOf,
    noneOf,
    lowerCaseChar,
    upperCaseChar,
    anyLetter,
    alphaNum,
    regex
};
