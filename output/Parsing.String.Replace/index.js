// Generated by purs version 0.15.2
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Rec_Class from "../Control.Monad.Rec.Class/index.js";
import * as Control_Monad_ST_Global from "../Control.Monad.ST.Global/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_ST from "../Data.Array.ST/index.js";
import * as Data_Array_ST_Partial from "../Data.Array.ST.Partial/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_NonEmpty from "../Data.List.NonEmpty/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Nullable from "../Data.Nullable/index.js";
import * as Data_String_CodePoints from "../Data.String.CodePoints/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Unsafe from "../Effect.Unsafe/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Unsafe_Coerce from "../Unsafe.Coerce/index.js";
var splitCapCombinator = function (dictMonad) {
    return function (sep) {
        var posSep = Control_Bind.bind(Parsing.bindParserT)(Parsing.position)(function (v) {
            return Control_Bind.bind(Parsing.bindParserT)(sep)(function (x) {
                return Control_Bind.bind(Parsing.bindParserT)(Parsing.position)(function (v1) {
                    return Control_Applicative.pure(Parsing.applicativeParserT)(new Data_Tuple.Tuple(v.index, new Data_Tuple.Tuple(x, v1.index)));
                });
            });
        });
        var accum = function (v) {
            return Control_Bind.bind(Parsing.bindParserT)(Parsing_Combinators.optionMaybe(Parsing_Combinators["try"](Parsing_String.anyTill(dictMonad)(posSep))))(function (v1) {
                if (v1 instanceof Data_Maybe.Just) {
                    var carry_unmatched = (function () {
                        if (v.carry instanceof Data_Maybe.Nothing) {
                            return v1.value0.value0;
                        };
                        if (v.carry instanceof Data_Maybe.Just) {
                            return Data_String_CodePoints.singleton(v.carry.value0) + v1.value0.value0;
                        };
                        throw new Error("Failed pattern match at Parsing.String.Replace (line 289, column 29 - line 291, column 59): " + [ v.carry.constructor.name ]);
                    })();
                    var $27 = v1.value0.value1.value1.value1 === v1.value0.value1.value0;
                    if ($27) {
                        return Control_Bind.bind(Parsing.bindParserT)(Parsing_Combinators.optionMaybe(Parsing_String.anyCodePoint))(function (carryNext) {
                            var $28 = Data_Maybe.isJust(carryNext);
                            if ($28) {
                                return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Loop({
                                    carry: carryNext,
                                    rlist: new Data_List_Types.Cons(new Data_Tuple.Tuple(carry_unmatched, v1.value0.value1.value1.value0), v.rlist),
                                    arraySize: (function () {
                                        var $29 = Data_String_Common["null"](carry_unmatched);
                                        if ($29) {
                                            return v.arraySize + 1 | 0;
                                        };
                                        return v.arraySize + 2 | 0;
                                    })()
                                }));
                            };
                            return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Done({
                                carry: carryNext,
                                rlist: new Data_List_Types.Cons(new Data_Tuple.Tuple(carry_unmatched, v1.value0.value1.value1.value0), v.rlist),
                                arraySize: (function () {
                                    var $30 = Data_String_Common["null"](carry_unmatched);
                                    if ($30) {
                                        return v.arraySize + 1 | 0;
                                    };
                                    return v.arraySize + 2 | 0;
                                })()
                            }));
                        });
                    };
                    return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Loop({
                        carry: Data_Maybe.Nothing.value,
                        rlist: new Data_List_Types.Cons(new Data_Tuple.Tuple(carry_unmatched, v1.value0.value1.value1.value0), v.rlist),
                        arraySize: (function () {
                            var $31 = Data_String_Common["null"](carry_unmatched);
                            if ($31) {
                                return v.arraySize + 1 | 0;
                            };
                            return v.arraySize + 2 | 0;
                        })()
                    }));
                };
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Parsing.applicativeParserT)(new Control_Monad_Rec_Class.Done({
                        carry: v.carry,
                        rlist: v.rlist,
                        arraySize: v.arraySize
                    }));
                };
                throw new Error("Failed pattern match at Parsing.String.Replace (line 286, column 44 - line 316, column 48): " + [ v1.constructor.name ]);
            });
        };
        return Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT)(accum)({
            carry: Data_Maybe.Nothing.value,
            rlist: Data_List_Types.Nil.value,
            arraySize: 0
        });
    };
};
var splitCapT = function (dictMonad) {
    return function (dictMonadRec) {
        return function (input) {
            return function (sep) {
                return Control_Bind.bind(dictMonad.Bind1())(Parsing.runParserT(dictMonadRec)(input)(Control_Apply.apply(Parsing.applyParserT)(Data_Functor.map(Parsing.functorParserT)(Data_Tuple.Tuple.create)(splitCapCombinator(dictMonad)(sep)))(Parsing_String.rest)))(function (v) {
                    if (v instanceof Data_Either.Left) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_NonEmpty.singleton(new Data_Either.Left(input)));
                    };
                    if (v instanceof Data_Either.Right) {
                        var term = Data_Maybe.maybe(v.value0.value1)(function (cp) {
                            return Data_String_CodePoints.singleton(cp) + v.value0.value1;
                        })(v.value0.value0.carry);
                        var $44 = Data_List["null"](v.value0.value0.rlist);
                        if ($44) {
                            var $45 = Data_String_Common["null"](term);
                            if ($45) {
                                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_NonEmpty.singleton(new Data_Either.Left(input)));
                            };
                            return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_NonEmpty.singleton(new Data_Either.Left(term)));
                        };
                        return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.fromJust()(Data_List_NonEmpty.fromList(Data_Foldable.foldl(Data_List_Types.foldableList)(function (ls) {
                            return function (v1) {
                                var $47 = Data_String_Common["null"](v1.value0);
                                if ($47) {
                                    return new Data_List_Types.Cons(new Data_Either.Right(v1.value1), ls);
                                };
                                return new Data_List_Types.Cons(new Data_Either.Left(v1.value0), new Data_List_Types.Cons(new Data_Either.Right(v1.value1), ls));
                            };
                        })((function () {
                            var $50 = Data_String_Common["null"](term);
                            if ($50) {
                                return Data_List_Types.Nil.value;
                            };
                            return new Data_List_Types.Cons(new Data_Either.Left(term), Data_List_Types.Nil.value);
                        })())(v.value0.value0.rlist))));
                    };
                    throw new Error("Failed pattern match at Parsing.String.Replace (line 229, column 70 - line 253, column 16): " + [ v.constructor.name ]);
                });
            };
        };
    };
};
var splitCap = function (input) {
    return function (sep) {
        return Data_Newtype.unwrap()(splitCapT(Data_Identity.monadIdentity)(Control_Monad_Rec_Class.monadRecIdentity)(input)(sep));
    };
};
var replaceT = function (dictMonad) {
    return function (dictMonadRec) {
        return function (input) {
            return function (sep) {
                var doST = (function () {
                    var $83 = Control_Applicative.pure(dictMonad.Applicative0());
                    return function ($84) {
                        return $83(Effect_Unsafe.unsafePerformEffect(Control_Monad_ST_Global.toEffect($84)));
                    };
                })();
                return Control_Bind.bind(dictMonad.Bind1())(Parsing.runParserT(dictMonadRec)(input)(Control_Apply.apply(Parsing.applyParserT)(Data_Functor.map(Parsing.functorParserT)(Data_Tuple.Tuple.create)(splitCapCombinator(dictMonad)(sep)))(Parsing_String.rest)))(function (v) {
                    if (v instanceof Data_Either.Left) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(input);
                    };
                    if (v instanceof Data_Either.Right) {
                        var term = Data_Maybe.maybe(v.value0.value1)(function (cp) {
                            return Data_String_CodePoints.singleton(cp) + v.value0.value1;
                        })(v.value0.value0.carry);
                        return Control_Bind.bind(dictMonad.Bind1())(doST((function () {
                            var $58 = Data_String_Common["null"](term);
                            if ($58) {
                                return Data_Array_ST.unsafeThaw(Data_Array.replicate(v.value0.value0.arraySize)(Data_Nullable["null"]));
                            };
                            return function __do() {
                                var arr = Data_Array_ST.unsafeThaw(Data_Array.replicate(v.value0.value0.arraySize + 1 | 0)(Data_Nullable["null"]))();
                                Data_Array_ST_Partial.poke()(v.value0.value0.arraySize)(Data_Nullable.notNull(term))(arr)();
                                return arr;
                            };
                        })()))(function (v1) {
                            var accum = function (v2) {
                                var v3 = Data_List.uncons(v2["rlist'"]);
                                if (v3 instanceof Data_Maybe.Nothing) {
                                    return Control_Applicative.pure(dictMonad.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit));
                                };
                                if (v3 instanceof Data_Maybe.Just) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(dictMonad.Bind1())(doST(Data_Array_ST_Partial.poke()(v2.index)(Data_Nullable.notNull(v3.value0.head.value1))(v1)))(function () {
                                        var $62 = Data_String_Common["null"](v3.value0.head.value0);
                                        if ($62) {
                                            return Control_Applicative.pure(dictMonad.Applicative0())(new Control_Monad_Rec_Class.Loop({
                                                index: v2.index - 1 | 0,
                                                "rlist'": v3.value0.tail
                                            }));
                                        };
                                        return Control_Bind.discard(Control_Bind.discardUnit)(dictMonad.Bind1())(doST(Data_Array_ST_Partial.poke()(v2.index - 1 | 0)(Data_Nullable.notNull(v3.value0.head.value0))(v1)))(function () {
                                            return Control_Applicative.pure(dictMonad.Applicative0())(new Control_Monad_Rec_Class.Loop({
                                                index: v2.index - 2 | 0,
                                                "rlist'": v3.value0.tail
                                            }));
                                        });
                                    });
                                };
                                throw new Error("Failed pattern match at Parsing.String.Replace (line 463, column 35 - line 473, column 63): " + [ v3.constructor.name ]);
                            };
                            return Control_Bind.discard(Control_Bind.discardUnit)(dictMonad.Bind1())(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(accum)({
                                index: v.value0.value0.arraySize - 1 | 0,
                                "rlist'": v.value0.value0.rlist
                            }))(function () {
                                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Functor.functorFn)(Data_String_Common.joinWith(""))(Unsafe_Coerce.unsafeCoerce))(doST(Data_Array_ST.unsafeFreeze(v1)));
                            });
                        });
                    };
                    throw new Error("Failed pattern match at Parsing.String.Replace (line 444, column 70 - line 481, column 72): " + [ v.constructor.name ]);
                });
            };
        };
    };
};
var replace = function (input) {
    return function (sep) {
        return Data_Newtype.unwrap()(replaceT(Data_Identity.monadIdentity)(Control_Monad_Rec_Class.monadRecIdentity)(input)(sep));
    };
};
var breakCapT = function (dictMonad) {
    return function (dictMonadRec) {
        return function (input) {
            return function (sep) {
                var go = Control_Bind.bind(Parsing.bindParserT)(Parsing_String.anyTill(dictMonad)(sep))(function (v) {
                    return Control_Bind.bind(Parsing.bindParserT)(Parsing.getParserT)(function (v1) {
                        return Control_Applicative.pure(Parsing.applicativeParserT)(new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1, v1.value0)));
                    });
                });
                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.hush)(Parsing.runParserT(dictMonadRec)(input)(go));
            };
        };
    };
};
var breakCap = function (input) {
    return function (sep) {
        return Data_Newtype.unwrap()(breakCapT(Data_Identity.monadIdentity)(Control_Monad_Rec_Class.monadRecIdentity)(input)(sep));
    };
};
export {
    breakCap,
    breakCapT,
    splitCap,
    splitCapT,
    replace,
    replaceT
};
