// Generated by purs version 0.15.2
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad from "../Control.Monad/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_Rec_Class from "../Control.Monad.Rec.Class/index.js";
import * as Control_Parallel from "../Control.Parallel/index.js";
import * as Control_Parallel_Class from "../Control.Parallel.Class/index.js";
import * as Control_Plus from "../Control.Plus/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Time_Duration from "../Data.Time.Duration/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Unsafe from "../Effect.Unsafe/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
import * as Unsafe_Coerce from "../Unsafe.Coerce/index.js";
var $runtime_lazy = function (name, moduleName, init) {
    var state = 0;
    var val;
    return function (lineNumber) {
        if (state === 2) return val;
        if (state === 1) throw new ReferenceError(name + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state = 1;
        val = init();
        state = 2;
        return val;
    };
};
var Fiber = function (x) {
    return x;
};
var FFIUtil = function (x) {
    return x;
};
var Canceler = function (x) {
    return x;
};
var suspendAff = /* #__PURE__ */ $foreign["_fork"](false);
var newtypeCanceler = {
    Coercible0: function () {
        return undefined;
    }
};
var functorParAff = {
    map: $foreign["_parAffMap"]
};
var functorAff = {
    map: $foreign["_map"]
};
var forkAff = /* #__PURE__ */ $foreign["_fork"](true);
var ffiUtil = /* #__PURE__ */ (function () {
    var unsafeFromRight = function (v) {
        if (v instanceof Data_Either.Right) {
            return v.value0;
        };
        if (v instanceof Data_Either.Left) {
            return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
        };
        throw new Error("Failed pattern match at Effect.Aff (line 407, column 21 - line 409, column 54): " + [ v.constructor.name ]);
    };
    var unsafeFromLeft = function (v) {
        if (v instanceof Data_Either.Left) {
            return v.value0;
        };
        if (v instanceof Data_Either.Right) {
            return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
        };
        throw new Error("Failed pattern match at Effect.Aff (line 402, column 20 - line 404, column 55): " + [ v.constructor.name ]);
    };
    var isLeft = function (v) {
        if (v instanceof Data_Either.Left) {
            return true;
        };
        if (v instanceof Data_Either.Right) {
            return false;
        };
        throw new Error("Failed pattern match at Effect.Aff (line 397, column 12 - line 399, column 21): " + [ v.constructor.name ]);
    };
    return {
        isLeft: isLeft,
        fromLeft: unsafeFromLeft,
        fromRight: unsafeFromRight,
        left: Data_Either.Left.create,
        right: Data_Either.Right.create
    };
})();
var makeFiber = function (aff) {
    return $foreign["_makeFiber"](ffiUtil, aff);
};
var launchAff = function (aff) {
    return function __do() {
        var fiber = makeFiber(aff)();
        fiber.run();
        return fiber;
    };
};
var launchAff_ = /* #__PURE__ */ (function () {
    var $39 = Data_Functor["void"](Effect.functorEffect);
    return function ($40) {
        return $39(launchAff($40));
    };
})();
var launchSuspendedAff = makeFiber;
var delay = function (v) {
    return $foreign["_delay"](Data_Either.Right.create, v);
};
var bracket = function (acquire) {
    return function (completed) {
        return $foreign.generalBracket(acquire)({
            killed: Data_Function["const"](completed),
            failed: Data_Function["const"](completed),
            completed: Data_Function["const"](completed)
        });
    };
};
var applyParAff = {
    apply: $foreign["_parAffApply"],
    Functor0: function () {
        return functorParAff;
    }
};
var semigroupParAff = function (dictSemigroup) {
    return {
        append: Control_Apply.lift2(applyParAff)(Data_Semigroup.append(dictSemigroup))
    };
};
var monadAff = {
    Applicative0: function () {
        return applicativeAff;
    },
    Bind1: function () {
        return bindAff;
    }
};
var bindAff = {
    bind: $foreign["_bind"],
    Apply0: function () {
        return $lazy_applyAff(0);
    }
};
var applicativeAff = {
    pure: $foreign["_pure"],
    Apply0: function () {
        return $lazy_applyAff(0);
    }
};
var $lazy_applyAff = /* #__PURE__ */ $runtime_lazy("applyAff", "Effect.Aff", function () {
    return {
        apply: Control_Monad.ap(monadAff),
        Functor0: function () {
            return functorAff;
        }
    };
});
var applyAff = /* #__PURE__ */ $lazy_applyAff(71);
var cancelWith = function (aff) {
    return function (v) {
        return $foreign.generalBracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))({
            killed: function (e) {
                return function (v1) {
                    return v(e);
                };
            },
            failed: Data_Function["const"](Control_Applicative.pure(applicativeAff)),
            completed: Data_Function["const"](Control_Applicative.pure(applicativeAff))
        })(Data_Function["const"](aff));
    };
};
var $$finally = function (fin) {
    return function (a) {
        return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
    };
};
var invincible = function (a) {
    return bracket(a)(Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit)))(Control_Applicative.pure(applicativeAff));
};
var lazyAff = {
    defer: function (f) {
        return Control_Bind.bind(bindAff)(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(f);
    }
};
var semigroupAff = function (dictSemigroup) {
    return {
        append: Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup))
    };
};
var monadEffectAff = {
    liftEffect: $foreign["_liftEffect"],
    Monad0: function () {
        return monadAff;
    }
};
var effectCanceler = /* #__PURE__ */ (function () {
    var $41 = Effect_Class.liftEffect(monadEffectAff);
    return function ($42) {
        return Canceler(Data_Function["const"]($41($42)));
    };
})();
var joinFiber = function (v) {
    return $foreign.makeAff(function (k) {
        return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
    });
};
var functorFiber = {
    map: function (f) {
        return function (t) {
            return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
        };
    }
};
var applyFiber = {
    apply: function (t1) {
        return function (t2) {
            return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Apply.apply(applyAff)(joinFiber(t1))(joinFiber(t2))));
        };
    },
    Functor0: function () {
        return functorFiber;
    }
};
var applicativeFiber = {
    pure: function (a) {
        return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Applicative.pure(applicativeAff)(a)));
    },
    Apply0: function () {
        return applyFiber;
    }
};
var killFiber = function (e) {
    return function (v) {
        return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (suspended) {
            if (suspended) {
                return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
            };
            return $foreign.makeAff(function (k) {
                return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
            });
        });
    };
};
var fiberCanceler = /* #__PURE__ */ (function () {
    var $43 = Data_Function.flip(killFiber);
    return function ($44) {
        return Canceler($43($44));
    };
})();
var monadThrowAff = {
    throwError: $foreign["_throwError"],
    Monad0: function () {
        return monadAff;
    }
};
var monadErrorAff = {
    catchError: $foreign["_catchError"],
    MonadThrow0: function () {
        return monadThrowAff;
    }
};
var attempt = /* #__PURE__ */ Control_Monad_Error_Class["try"](monadErrorAff);
var runAff = function (k) {
    return function (aff) {
        return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
            var $45 = Effect_Class.liftEffect(monadEffectAff);
            return function ($46) {
                return $45(k($46));
            };
        })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
    };
};
var runAff_ = function (k) {
    return function (aff) {
        return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
    };
};
var runSuspendedAff = function (k) {
    return function (aff) {
        return launchSuspendedAff(Control_Bind.bindFlipped(bindAff)((function () {
            var $47 = Effect_Class.liftEffect(monadEffectAff);
            return function ($48) {
                return $47(k($48));
            };
        })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
    };
};
var parallelAff = {
    parallel: Unsafe_Coerce.unsafeCoerce,
    sequential: $foreign["_sequential"],
    Monad0: function () {
        return monadAff;
    },
    Applicative1: function () {
        return $lazy_applicativeParAff(0);
    }
};
var $lazy_applicativeParAff = /* #__PURE__ */ $runtime_lazy("applicativeParAff", "Effect.Aff", function () {
    return {
        pure: (function () {
            var $49 = Control_Parallel_Class.parallel(parallelAff);
            var $50 = Control_Applicative.pure(applicativeAff);
            return function ($51) {
                return $49($50($51));
            };
        })(),
        Apply0: function () {
            return applyParAff;
        }
    };
});
var applicativeParAff = /* #__PURE__ */ $lazy_applicativeParAff(131);
var monoidParAff = function (dictMonoid) {
    return {
        mempty: Control_Applicative.pure(applicativeParAff)(Data_Monoid.mempty(dictMonoid)),
        Semigroup0: function () {
            return semigroupParAff(dictMonoid.Semigroup0());
        }
    };
};
var semigroupCanceler = {
    append: function (v) {
        return function (v1) {
            return function (err) {
                return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
            };
        };
    }
};
var supervise = function (aff) {
    var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");
    var killAll = function (err) {
        return function (sup) {
            return $foreign.makeAff(function (k) {
                return $foreign["_killAll"](err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
            });
        };
    };
    var acquire = function __do() {
        var sup = $foreign["_makeSupervisedFiber"](ffiUtil, aff)();
        sup.fiber.run();
        return sup;
    };
    return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
        killed: function (err) {
            return function (sup) {
                return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ killFiber(err)(sup.fiber), killAll(err)(sup) ]);
            };
        },
        failed: Data_Function["const"](killAll(killError)),
        completed: Data_Function["const"](killAll(killError))
    })(function ($52) {
        return joinFiber((function (v) {
            return v.fiber;
        })($52));
    });
};
var monadRecAff = {
    tailRecM: function (k) {
        var go = function (a) {
            return Control_Bind.bind(bindAff)(k(a))(function (res) {
                if (res instanceof Control_Monad_Rec_Class.Done) {
                    return Control_Applicative.pure(applicativeAff)(res.value0);
                };
                if (res instanceof Control_Monad_Rec_Class.Loop) {
                    return go(res.value0);
                };
                throw new Error("Failed pattern match at Effect.Aff (line 102, column 7 - line 104, column 23): " + [ res.constructor.name ]);
            });
        };
        return go;
    },
    Monad0: function () {
        return monadAff;
    }
};
var monoidAff = function (dictMonoid) {
    return {
        mempty: Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)),
        Semigroup0: function () {
            return semigroupAff(dictMonoid.Semigroup0());
        }
    };
};
var nonCanceler = /* #__PURE__ */ Data_Function["const"](/* #__PURE__ */ Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
var monoidCanceler = {
    mempty: nonCanceler,
    Semigroup0: function () {
        return semigroupCanceler;
    }
};
var never = /* #__PURE__ */ $foreign.makeAff(function (v) {
    return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
});
var apathize = /* #__PURE__ */ (function () {
    var $53 = Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit));
    return function ($54) {
        return $53(attempt($54));
    };
})();
var altParAff = {
    alt: $foreign["_parAffAlt"],
    Functor0: function () {
        return functorParAff;
    }
};
var altAff = {
    alt: function (a1) {
        return function (a2) {
            return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
        };
    },
    Functor0: function () {
        return functorAff;
    }
};
var plusAff = {
    empty: /* #__PURE__ */ Control_Monad_Error_Class.throwError(monadThrowAff)(/* #__PURE__ */ Effect_Exception.error("Always fails")),
    Alt0: function () {
        return altAff;
    }
};
var plusParAff = {
    empty: /* #__PURE__ */ Control_Parallel_Class.parallel(parallelAff)(/* #__PURE__ */ Control_Plus.empty(plusAff)),
    Alt0: function () {
        return altParAff;
    }
};
var alternativeParAff = {
    Applicative0: function () {
        return applicativeParAff;
    },
    Plus1: function () {
        return plusParAff;
    }
};
export {
    makeAff,
    generalBracket
} from "./foreign.js";
export {
    Canceler,
    launchAff,
    launchAff_,
    launchSuspendedAff,
    runAff,
    runAff_,
    runSuspendedAff,
    forkAff,
    suspendAff,
    supervise,
    attempt,
    apathize,
    delay,
    never,
    $$finally as finally,
    invincible,
    killFiber,
    joinFiber,
    cancelWith,
    bracket,
    nonCanceler,
    effectCanceler,
    fiberCanceler,
    functorAff,
    applyAff,
    applicativeAff,
    bindAff,
    monadAff,
    semigroupAff,
    monoidAff,
    altAff,
    plusAff,
    monadRecAff,
    monadThrowAff,
    monadErrorAff,
    monadEffectAff,
    lazyAff,
    functorParAff,
    applyParAff,
    applicativeParAff,
    semigroupParAff,
    monoidParAff,
    altParAff,
    plusParAff,
    alternativeParAff,
    parallelAff,
    functorFiber,
    applyFiber,
    applicativeFiber,
    newtypeCanceler,
    semigroupCanceler,
    monoidCanceler
};
export {
    catchError,
    throwError,
    try
} from "../Control.Monad.Error.Class/index.js";
export {
    parallel,
    sequential
} from "../Control.Parallel.Class/index.js";
export {
    Milliseconds
} from "../Data.Time.Duration/index.js";
export {
    error,
    message
} from "../Effect.Exception/index.js";
