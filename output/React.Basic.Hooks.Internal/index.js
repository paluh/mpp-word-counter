// Generated by purs version 0.15.2
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind_Indexed from "../Control.Bind.Indexed/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Effect from "../Effect/index.js";
var Render = function (x) {
    return x;
};
var unsafeRenderEffect = Render;
var unsafeHook = Render;
var semigroupRender = function (dictTypeEquals) {
    return function (dictSemigroup) {
        return {
            append: function (v) {
                return function (v1) {
                    return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))(v)(v1);
                };
            }
        };
    };
};
var monoidRender = function (dictTypeEquals) {
    return function (dictMonoid) {
        return {
            mempty: Data_Monoid.mempty(Effect.monoidEffect(dictMonoid)),
            Semigroup0: function () {
                return semigroupRender(dictTypeEquals)(dictMonoid.Semigroup0());
            }
        };
    };
};
var ixFunctorRender = {
    imap: function (f) {
        return function (v) {
            return Data_Functor.map(Effect.functorEffect)(f)(v);
        };
    }
};
var ixApplyRender = {
    iapply: function (v) {
        return function (v1) {
            return Control_Apply.apply(Effect.applyEffect)(v)(v1);
        };
    },
    IxFunctor0: function () {
        return ixFunctorRender;
    }
};
var ixBindRender = {
    ibind: function (v) {
        return function (f) {
            return function __do() {
                var a = v();
                var v1 = f(a);
                return v1();
            };
        };
    },
    IxApply0: function () {
        return ixApplyRender;
    }
};
var ixApplicativeRender = {
    ipure: function (a) {
        return Control_Applicative.pure(Effect.applicativeEffect)(a);
    },
    IxApply0: function () {
        return ixApplyRender;
    }
};
var ixMonadRender = {
    IxApplicative0: function () {
        return ixApplicativeRender;
    },
    IxBind1: function () {
        return ixBindRender;
    }
};
var functorRender = {
    map: function (f) {
        return function (v) {
            return Data_Functor.map(Effect.functorEffect)(f)(v);
        };
    }
};
var discard = function (dictIxBind) {
    return Control_Bind_Indexed.ibind(dictIxBind);
};
var coerceHook = function () {
    return function (v) {
        return v;
    };
};
var bind = function (dictIxBind) {
    return Control_Bind_Indexed.ibind(dictIxBind);
};
var applyRender = function (dictTypeEquals) {
    return {
        apply: function (v) {
            return function (v1) {
                return Control_Apply.apply(Effect.applyEffect)(v)(v1);
            };
        },
        Functor0: function () {
            return functorRender;
        }
    };
};
var bindRender = function (dictTypeEquals) {
    return {
        bind: function (v) {
            return function (f) {
                return function __do() {
                    var a = v();
                    var v1 = f(a);
                    return v1();
                };
            };
        },
        Apply0: function () {
            return applyRender(dictTypeEquals);
        }
    };
};
var applicativeRender = function (dictTypeEquals) {
    return {
        pure: function (a) {
            return Control_Applicative.pure(Effect.applicativeEffect)(a);
        },
        Apply0: function () {
            return applyRender(dictTypeEquals);
        }
    };
};
var monadRender = function (dictTypeEquals) {
    return {
        Applicative0: function () {
            return applicativeRender(dictTypeEquals);
        },
        Bind1: function () {
            return bindRender(dictTypeEquals);
        }
    };
};
export {
    coerceHook,
    unsafeHook,
    unsafeRenderEffect,
    bind,
    discard,
    ixFunctorRender,
    ixApplyRender,
    ixApplicativeRender,
    ixBindRender,
    ixMonadRender,
    functorRender,
    applyRender,
    applicativeRender,
    bindRender,
    monadRender,
    semigroupRender,
    monoidRender
};
